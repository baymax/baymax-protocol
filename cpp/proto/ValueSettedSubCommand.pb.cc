// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ValueSettedSubCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/ValueSettedSubCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ValueSettedSubCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueSettedSubCommand_reflection_ = NULL;
struct ValueSettedSubCommandOneofInstance {
  ::google::protobuf::uint32 othervalue_;
  ::google::protobuf::uint32 currentvalue_;
  ::google::protobuf::uint32 voltagevalue_;
  float temperaturevalue_;
}* ValueSettedSubCommand_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fValueSettedSubCommand_2eproto() {
  protobuf_AddDesc_proto_2fValueSettedSubCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/ValueSettedSubCommand.proto");
  GOOGLE_CHECK(file != NULL);
  ValueSettedSubCommand_descriptor_ = file->message_type(0);
  static const int ValueSettedSubCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSettedSubCommand, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueSettedSubCommand_default_oneof_instance_, othervalue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueSettedSubCommand_default_oneof_instance_, currentvalue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueSettedSubCommand_default_oneof_instance_, voltagevalue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ValueSettedSubCommand_default_oneof_instance_, temperaturevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSettedSubCommand, dateseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSettedSubCommand, values_),
  };
  ValueSettedSubCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValueSettedSubCommand_descriptor_,
      ValueSettedSubCommand::default_instance_,
      ValueSettedSubCommand_offsets_,
      -1,
      -1,
      -1,
      ValueSettedSubCommand_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSettedSubCommand, _oneof_case_[0]),
      sizeof(ValueSettedSubCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSettedSubCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSettedSubCommand, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fValueSettedSubCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValueSettedSubCommand_descriptor_, &ValueSettedSubCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fValueSettedSubCommand_2eproto() {
  delete ValueSettedSubCommand::default_instance_;
  delete ValueSettedSubCommand_default_oneof_instance_;
  delete ValueSettedSubCommand_reflection_;
}

void protobuf_AddDesc_proto_2fValueSettedSubCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!proto/ValueSettedSubCommand.proto\"\244\001\n\025"
    "ValueSettedSubCommand\022\n\n\002id\030\001 \001(\r\022\024\n\noth"
    "erValue\030\002 \001(\rH\000\022\026\n\014currentValue\030\003 \001(\rH\000\022"
    "\026\n\014voltageValue\030\004 \001(\rH\000\022\032\n\020temperatureVa"
    "lue\030\005 \001(\002H\000\022\023\n\013dateSeconds\030\006 \001(\004B\010\n\006valu"
    "esb\006proto3", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/ValueSettedSubCommand.proto", &protobuf_RegisterTypes);
  ValueSettedSubCommand::default_instance_ = new ValueSettedSubCommand();
  ValueSettedSubCommand_default_oneof_instance_ = new ValueSettedSubCommandOneofInstance();
  ValueSettedSubCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fValueSettedSubCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fValueSettedSubCommand_2eproto {
  StaticDescriptorInitializer_proto_2fValueSettedSubCommand_2eproto() {
    protobuf_AddDesc_proto_2fValueSettedSubCommand_2eproto();
  }
} static_descriptor_initializer_proto_2fValueSettedSubCommand_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueSettedSubCommand::kIdFieldNumber;
const int ValueSettedSubCommand::kOtherValueFieldNumber;
const int ValueSettedSubCommand::kCurrentValueFieldNumber;
const int ValueSettedSubCommand::kVoltageValueFieldNumber;
const int ValueSettedSubCommand::kTemperatureValueFieldNumber;
const int ValueSettedSubCommand::kDateSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueSettedSubCommand::ValueSettedSubCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ValueSettedSubCommand)
}

void ValueSettedSubCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ValueSettedSubCommand_default_oneof_instance_->othervalue_ = 0u;
  ValueSettedSubCommand_default_oneof_instance_->currentvalue_ = 0u;
  ValueSettedSubCommand_default_oneof_instance_->voltagevalue_ = 0u;
  ValueSettedSubCommand_default_oneof_instance_->temperaturevalue_ = 0;
}

ValueSettedSubCommand::ValueSettedSubCommand(const ValueSettedSubCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ValueSettedSubCommand)
}

void ValueSettedSubCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  dateseconds_ = GOOGLE_ULONGLONG(0);
  clear_has_values();
}

ValueSettedSubCommand::~ValueSettedSubCommand() {
  // @@protoc_insertion_point(destructor:ValueSettedSubCommand)
  SharedDtor();
}

void ValueSettedSubCommand::SharedDtor() {
  if (has_values()) {
    clear_values();
  }
  if (this != default_instance_) {
  }
}

void ValueSettedSubCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueSettedSubCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueSettedSubCommand_descriptor_;
}

const ValueSettedSubCommand& ValueSettedSubCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fValueSettedSubCommand_2eproto();
  return *default_instance_;
}

ValueSettedSubCommand* ValueSettedSubCommand::default_instance_ = NULL;

ValueSettedSubCommand* ValueSettedSubCommand::New(::google::protobuf::Arena* arena) const {
  ValueSettedSubCommand* n = new ValueSettedSubCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueSettedSubCommand::clear_values() {
  switch(values_case()) {
    case kOtherValue: {
      // No need to clear
      break;
    }
    case kCurrentValue: {
      // No need to clear
      break;
    }
    case kVoltageValue: {
      // No need to clear
      break;
    }
    case kTemperatureValue: {
      // No need to clear
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUES_NOT_SET;
}


void ValueSettedSubCommand::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ValueSettedSubCommand*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dateseconds_, id_);

#undef ZR_HELPER_
#undef ZR_

  clear_values();
}

bool ValueSettedSubCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ValueSettedSubCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_otherValue;
        break;
      }

      // optional uint32 otherValue = 2;
      case 2: {
        if (tag == 16) {
         parse_otherValue:
          clear_values();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &values_.othervalue_)));
          set_has_othervalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currentValue;
        break;
      }

      // optional uint32 currentValue = 3;
      case 3: {
        if (tag == 24) {
         parse_currentValue:
          clear_values();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &values_.currentvalue_)));
          set_has_currentvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_voltageValue;
        break;
      }

      // optional uint32 voltageValue = 4;
      case 4: {
        if (tag == 32) {
         parse_voltageValue:
          clear_values();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &values_.voltagevalue_)));
          set_has_voltagevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_temperatureValue;
        break;
      }

      // optional float temperatureValue = 5;
      case 5: {
        if (tag == 45) {
         parse_temperatureValue:
          clear_values();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &values_.temperaturevalue_)));
          set_has_temperaturevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dateSeconds;
        break;
      }

      // optional uint64 dateSeconds = 6;
      case 6: {
        if (tag == 48) {
         parse_dateSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dateseconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ValueSettedSubCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ValueSettedSubCommand)
  return false;
#undef DO_
}

void ValueSettedSubCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ValueSettedSubCommand)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 otherValue = 2;
  if (has_othervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othervalue(), output);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentvalue(), output);
  }

  // optional uint32 voltageValue = 4;
  if (has_voltagevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->voltagevalue(), output);
  }

  // optional float temperatureValue = 5;
  if (has_temperaturevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->temperaturevalue(), output);
  }

  // optional uint64 dateSeconds = 6;
  if (this->dateseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dateseconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:ValueSettedSubCommand)
}

::google::protobuf::uint8* ValueSettedSubCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ValueSettedSubCommand)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 otherValue = 2;
  if (has_othervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othervalue(), target);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentvalue(), target);
  }

  // optional uint32 voltageValue = 4;
  if (has_voltagevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->voltagevalue(), target);
  }

  // optional float temperatureValue = 5;
  if (has_temperaturevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->temperaturevalue(), target);
  }

  // optional uint64 dateSeconds = 6;
  if (this->dateseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dateseconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ValueSettedSubCommand)
  return target;
}

int ValueSettedSubCommand::ByteSize() const {
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint64 dateSeconds = 6;
  if (this->dateseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dateseconds());
  }

  switch (values_case()) {
    // optional uint32 otherValue = 2;
    case kOtherValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othervalue());
      break;
    }
    // optional uint32 currentValue = 3;
    case kCurrentValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentvalue());
      break;
    }
    // optional uint32 voltageValue = 4;
    case kVoltageValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voltagevalue());
      break;
    }
    // optional float temperatureValue = 5;
    case kTemperatureValue: {
      total_size += 1 + 4;
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueSettedSubCommand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ValueSettedSubCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueSettedSubCommand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValueSettedSubCommand::MergeFrom(const ValueSettedSubCommand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.values_case()) {
    case kOtherValue: {
      set_othervalue(from.othervalue());
      break;
    }
    case kCurrentValue: {
      set_currentvalue(from.currentvalue());
      break;
    }
    case kVoltageValue: {
      set_voltagevalue(from.voltagevalue());
      break;
    }
    case kTemperatureValue: {
      set_temperaturevalue(from.temperaturevalue());
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.dateseconds() != 0) {
    set_dateseconds(from.dateseconds());
  }
}

void ValueSettedSubCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueSettedSubCommand::CopyFrom(const ValueSettedSubCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSettedSubCommand::IsInitialized() const {

  return true;
}

void ValueSettedSubCommand::Swap(ValueSettedSubCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueSettedSubCommand::InternalSwap(ValueSettedSubCommand* other) {
  std::swap(id_, other->id_);
  std::swap(dateseconds_, other->dateseconds_);
  std::swap(values_, other->values_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueSettedSubCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueSettedSubCommand_descriptor_;
  metadata.reflection = ValueSettedSubCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueSettedSubCommand

// optional uint32 id = 1;
void ValueSettedSubCommand::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 ValueSettedSubCommand::id() const {
  // @@protoc_insertion_point(field_get:ValueSettedSubCommand.id)
  return id_;
}
 void ValueSettedSubCommand::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ValueSettedSubCommand.id)
}

// optional uint32 otherValue = 2;
bool ValueSettedSubCommand::has_othervalue() const {
  return values_case() == kOtherValue;
}
void ValueSettedSubCommand::set_has_othervalue() {
  _oneof_case_[0] = kOtherValue;
}
void ValueSettedSubCommand::clear_othervalue() {
  if (has_othervalue()) {
    values_.othervalue_ = 0u;
    clear_has_values();
  }
}
 ::google::protobuf::uint32 ValueSettedSubCommand::othervalue() const {
  // @@protoc_insertion_point(field_get:ValueSettedSubCommand.otherValue)
  if (has_othervalue()) {
    return values_.othervalue_;
  }
  return 0u;
}
 void ValueSettedSubCommand::set_othervalue(::google::protobuf::uint32 value) {
  if (!has_othervalue()) {
    clear_values();
    set_has_othervalue();
  }
  values_.othervalue_ = value;
  // @@protoc_insertion_point(field_set:ValueSettedSubCommand.otherValue)
}

// optional uint32 currentValue = 3;
bool ValueSettedSubCommand::has_currentvalue() const {
  return values_case() == kCurrentValue;
}
void ValueSettedSubCommand::set_has_currentvalue() {
  _oneof_case_[0] = kCurrentValue;
}
void ValueSettedSubCommand::clear_currentvalue() {
  if (has_currentvalue()) {
    values_.currentvalue_ = 0u;
    clear_has_values();
  }
}
 ::google::protobuf::uint32 ValueSettedSubCommand::currentvalue() const {
  // @@protoc_insertion_point(field_get:ValueSettedSubCommand.currentValue)
  if (has_currentvalue()) {
    return values_.currentvalue_;
  }
  return 0u;
}
 void ValueSettedSubCommand::set_currentvalue(::google::protobuf::uint32 value) {
  if (!has_currentvalue()) {
    clear_values();
    set_has_currentvalue();
  }
  values_.currentvalue_ = value;
  // @@protoc_insertion_point(field_set:ValueSettedSubCommand.currentValue)
}

// optional uint32 voltageValue = 4;
bool ValueSettedSubCommand::has_voltagevalue() const {
  return values_case() == kVoltageValue;
}
void ValueSettedSubCommand::set_has_voltagevalue() {
  _oneof_case_[0] = kVoltageValue;
}
void ValueSettedSubCommand::clear_voltagevalue() {
  if (has_voltagevalue()) {
    values_.voltagevalue_ = 0u;
    clear_has_values();
  }
}
 ::google::protobuf::uint32 ValueSettedSubCommand::voltagevalue() const {
  // @@protoc_insertion_point(field_get:ValueSettedSubCommand.voltageValue)
  if (has_voltagevalue()) {
    return values_.voltagevalue_;
  }
  return 0u;
}
 void ValueSettedSubCommand::set_voltagevalue(::google::protobuf::uint32 value) {
  if (!has_voltagevalue()) {
    clear_values();
    set_has_voltagevalue();
  }
  values_.voltagevalue_ = value;
  // @@protoc_insertion_point(field_set:ValueSettedSubCommand.voltageValue)
}

// optional float temperatureValue = 5;
bool ValueSettedSubCommand::has_temperaturevalue() const {
  return values_case() == kTemperatureValue;
}
void ValueSettedSubCommand::set_has_temperaturevalue() {
  _oneof_case_[0] = kTemperatureValue;
}
void ValueSettedSubCommand::clear_temperaturevalue() {
  if (has_temperaturevalue()) {
    values_.temperaturevalue_ = 0;
    clear_has_values();
  }
}
 float ValueSettedSubCommand::temperaturevalue() const {
  // @@protoc_insertion_point(field_get:ValueSettedSubCommand.temperatureValue)
  if (has_temperaturevalue()) {
    return values_.temperaturevalue_;
  }
  return 0;
}
 void ValueSettedSubCommand::set_temperaturevalue(float value) {
  if (!has_temperaturevalue()) {
    clear_values();
    set_has_temperaturevalue();
  }
  values_.temperaturevalue_ = value;
  // @@protoc_insertion_point(field_set:ValueSettedSubCommand.temperatureValue)
}

// optional uint64 dateSeconds = 6;
void ValueSettedSubCommand::clear_dateseconds() {
  dateseconds_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ValueSettedSubCommand::dateseconds() const {
  // @@protoc_insertion_point(field_get:ValueSettedSubCommand.dateSeconds)
  return dateseconds_;
}
 void ValueSettedSubCommand::set_dateseconds(::google::protobuf::uint64 value) {
  
  dateseconds_ = value;
  // @@protoc_insertion_point(field_set:ValueSettedSubCommand.dateSeconds)
}

bool ValueSettedSubCommand::has_values() const {
  return values_case() != VALUES_NOT_SET;
}
void ValueSettedSubCommand::clear_has_values() {
  _oneof_case_[0] = VALUES_NOT_SET;
}
ValueSettedSubCommand::ValuesCase ValueSettedSubCommand::values_case() const {
  return ValueSettedSubCommand::ValuesCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
