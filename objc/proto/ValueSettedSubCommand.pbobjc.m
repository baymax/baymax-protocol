// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ValueSettedSubCommand.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "proto/ValueSettedSubCommand.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - ValueSettedSubCommandRoot

@implementation ValueSettedSubCommandRoot

@end

#pragma mark - ValueSettedSubCommandRoot_FileDescriptor

static GPBFileDescriptor *ValueSettedSubCommandRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ValueSettedSubCommand

@implementation ValueSettedSubCommand

@dynamic valuesOneOfCase;
@dynamic id_p;
@dynamic otherValue;
@dynamic currentValue;
@dynamic voltageValue;
@dynamic temperatureValue;
@dynamic dateSeconds;

typedef struct ValueSettedSubCommand__storage_ {
  uint32_t _has_storage_[2];
  uint32_t id_p;
  uint32_t otherValue;
  uint32_t currentValue;
  uint32_t voltageValue;
  float temperatureValue;
  uint64_t dateSeconds;
} ValueSettedSubCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageOneofDescription oneofs[] = {
      {
        .name = "values",
        .index = -1,
      },
    };
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = ValueSettedSubCommand_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(ValueSettedSubCommand__storage_, id_p),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "otherValue",
        .number = ValueSettedSubCommand_FieldNumber_OtherValue,
        .hasIndex = -1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(ValueSettedSubCommand__storage_, otherValue),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "currentValue",
        .number = ValueSettedSubCommand_FieldNumber_CurrentValue,
        .hasIndex = -1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(ValueSettedSubCommand__storage_, currentValue),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "voltageValue",
        .number = ValueSettedSubCommand_FieldNumber_VoltageValue,
        .hasIndex = -1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(ValueSettedSubCommand__storage_, voltageValue),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "temperatureValue",
        .number = ValueSettedSubCommand_FieldNumber_TemperatureValue,
        .hasIndex = -1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(ValueSettedSubCommand__storage_, temperatureValue),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "dateSeconds",
        .number = ValueSettedSubCommand_FieldNumber_DateSeconds,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt64,
        .offset = offsetof(ValueSettedSubCommand__storage_, dateSeconds),
        .defaultValue.valueUInt64 = 0ULL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\005\002\n\000\003\014\000\004\014\000\005\020\000\006\013\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ValueSettedSubCommand class]
                                     rootClass:[ValueSettedSubCommandRoot class]
                                          file:ValueSettedSubCommandRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:oneofs
                                    oneofCount:sizeof(oneofs) / sizeof(GPBMessageOneofDescription)
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ValueSettedSubCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ValueSettedSubCommand_ClearValuesOneOfCase(ValueSettedSubCommand *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, 0);
}

// @@protoc_insertion_point(global_scope)
