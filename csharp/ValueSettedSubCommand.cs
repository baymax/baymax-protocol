// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ValueSettedSubCommand.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto/ValueSettedSubCommand.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ValueSettedSubCommandReflection {

  #region Descriptor
  /// <summary>File descriptor for proto/ValueSettedSubCommand.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ValueSettedSubCommandReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiFwcm90by9WYWx1ZVNldHRlZFN1YkNvbW1hbmQucHJvdG8iZAoVVmFsdWVT",
          "ZXR0ZWRTdWJDb21tYW5kEgoKAmlkGAEgASgNEhAKBmlWYWx1ZRgCIAEoBUgA",
          "EhAKBmZWYWx1ZRgDIAEoAkgAEhEKB3VpVmFsdWUYBCABKA1IAEIICgZ2YWx1",
          "ZXNiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::ValueSettedSubCommand), global::ValueSettedSubCommand.Parser, new[]{ "Id", "IValue", "FValue", "UiValue" }, new[]{ "Values" }, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ValueSettedSubCommand : pb::IMessage<ValueSettedSubCommand> {
  private static readonly pb::MessageParser<ValueSettedSubCommand> _parser = new pb::MessageParser<ValueSettedSubCommand>(() => new ValueSettedSubCommand());
  public static pb::MessageParser<ValueSettedSubCommand> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::ValueSettedSubCommandReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ValueSettedSubCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ValueSettedSubCommand(ValueSettedSubCommand other) : this() {
    id_ = other.id_;
    switch (other.ValuesCase) {
      case ValuesOneofCase.IValue:
        IValue = other.IValue;
        break;
      case ValuesOneofCase.FValue:
        FValue = other.FValue;
        break;
      case ValuesOneofCase.UiValue:
        UiValue = other.UiValue;
        break;
    }

  }

  public ValueSettedSubCommand Clone() {
    return new ValueSettedSubCommand(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "iValue" field.</summary>
  public const int IValueFieldNumber = 2;
  public int IValue {
    get { return valuesCase_ == ValuesOneofCase.IValue ? (int) values_ : 0; }
    set {
      values_ = value;
      valuesCase_ = ValuesOneofCase.IValue;
    }
  }

  /// <summary>Field number for the "fValue" field.</summary>
  public const int FValueFieldNumber = 3;
  public float FValue {
    get { return valuesCase_ == ValuesOneofCase.FValue ? (float) values_ : 0F; }
    set {
      values_ = value;
      valuesCase_ = ValuesOneofCase.FValue;
    }
  }

  /// <summary>Field number for the "uiValue" field.</summary>
  public const int UiValueFieldNumber = 4;
  public uint UiValue {
    get { return valuesCase_ == ValuesOneofCase.UiValue ? (uint) values_ : 0; }
    set {
      values_ = value;
      valuesCase_ = ValuesOneofCase.UiValue;
    }
  }

  private object values_;
  /// <summary>Enum of possible cases for the "values" oneof.</summary>
  public enum ValuesOneofCase {
    None = 0,
    IValue = 2,
    FValue = 3,
    UiValue = 4,
  }
  private ValuesOneofCase valuesCase_ = ValuesOneofCase.None;
  public ValuesOneofCase ValuesCase {
    get { return valuesCase_; }
  }

  public void ClearValues() {
    valuesCase_ = ValuesOneofCase.None;
    values_ = null;
  }

  public override bool Equals(object other) {
    return Equals(other as ValueSettedSubCommand);
  }

  public bool Equals(ValueSettedSubCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (IValue != other.IValue) return false;
    if (FValue != other.FValue) return false;
    if (UiValue != other.UiValue) return false;
    if (ValuesCase != other.ValuesCase) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (valuesCase_ == ValuesOneofCase.IValue) hash ^= IValue.GetHashCode();
    if (valuesCase_ == ValuesOneofCase.FValue) hash ^= FValue.GetHashCode();
    if (valuesCase_ == ValuesOneofCase.UiValue) hash ^= UiValue.GetHashCode();
    hash ^= (int) valuesCase_;
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (valuesCase_ == ValuesOneofCase.IValue) {
      output.WriteRawTag(16);
      output.WriteInt32(IValue);
    }
    if (valuesCase_ == ValuesOneofCase.FValue) {
      output.WriteRawTag(29);
      output.WriteFloat(FValue);
    }
    if (valuesCase_ == ValuesOneofCase.UiValue) {
      output.WriteRawTag(32);
      output.WriteUInt32(UiValue);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (valuesCase_ == ValuesOneofCase.IValue) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IValue);
    }
    if (valuesCase_ == ValuesOneofCase.FValue) {
      size += 1 + 4;
    }
    if (valuesCase_ == ValuesOneofCase.UiValue) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UiValue);
    }
    return size;
  }

  public void MergeFrom(ValueSettedSubCommand other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    switch (other.ValuesCase) {
      case ValuesOneofCase.IValue:
        IValue = other.IValue;
        break;
      case ValuesOneofCase.FValue:
        FValue = other.FValue;
        break;
      case ValuesOneofCase.UiValue:
        UiValue = other.UiValue;
        break;
    }

  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 16: {
          IValue = input.ReadInt32();
          break;
        }
        case 29: {
          FValue = input.ReadFloat();
          break;
        }
        case 32: {
          UiValue = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
